resource "aws_lb_listener_rule" "example" {
  listener_arn = aws_lb_listener.example.arn
  priority     = 100

  action {
    type = "redirect"

    redirect_action {
      protocol      = "HTTPS"
      port          = "443"
      path          = "/syn/"
      query         = ""
      status_code   = "HTTP_301"
      host          = "#{host}"
      prefix        = "#{path}"
      query         = "#{query}"
      host_priority = "#{priority}"
    }
  }

  condition {
    path_pattern {
      values = ["/"]
    }
  }
}


# main.tf

resource "aws_iam_user" "example_user" {
  name = var.user_name
}

resource "aws_iam_role" "example_role" {
  name = var.role_name
}

resource "aws_iam_policy" "example_policy" {
  name        = var.policy_name
  description = "Example policy"

  policy = jsonencode(var.policy_document)
}

resource "aws_iam_user_policy_attachment" "user_policy" {
  count       = var.create_user ? 1 : 0
  policy_arn  = aws_iam_policy.example_policy.arn
  user        = aws_iam_user.example_user.name
}

resource "aws_iam_role_policy_attachment" "role_policy" {
  count       = var.create_role ? 1 : 0
  policy_arn  = aws_iam_policy.example_policy.arn
  role        = aws_iam_role.example_role.name
}



# variables.tf

variable "user_name" {
  description = "Name of the IAM user."
}

variable "role_name" {
  description = "Name of the IAM role."
}

variable "create_user" {
  description = "Set to true to create the IAM user."
  default     = true
}

variable "create_role" {
  description = "Set to true to create the IAM role."
  default     = true
}

variable "policy_name" {
  description = "Name of the IAM policy."
}

variable "policy_document" {
  description = "IAM policy document in JSON format."
  type        = map
  default     = {}
}



# main.tf

module "iam_example" {
  source = "./path/to/your/module"

  user_name     = "example-user"
  role_name     = "example-role"
  create_user   = true
  create_role   = true
  policy_name   = "example-policy"
  policy_document = {
    Version = "2012-10-17",
    Statement = [
      {
        Action = ["s3:GetObject"],
        Effect = "Allow",
        Resource = "arn:aws:s3:::example-bucket/*",
      },
    ],
  }
}

#########################################################################


# main.tf
resource "aws_iam_user" "iam_user" {
  count = var.create_user ? 1 : 0
  name  = var.user_name
}

resource "aws_iam_role" "iam_role" {
  count = var.create_role ? 1 : 0
  name  = var.role_name

  assume_role_policy = var.role_assume_policy
}

resource "aws_iam_policy" "iam_policy" {
  count = length(var.policy_names)
  name  = var.policy_names[count.index]
  description = "Dynamic policy created by Terraform"
  policy = var.policy_jsons[count.index]
}

resource "aws_iam_policy_attachment" "iam_user_policy_attachment" {
  count = var.create_user ? length(var.policy_names) : 0
  policy_arn = aws_iam_policy.iam_policy[count.index].arn
  user       = aws_iam_user.iam_user[0].name
}

resource "aws_iam_policy_attachment" "iam_role_policy_attachment" {
  count = var.create_role ? length(var.policy_names) : 0
  policy_arn = aws_iam_policy.iam_policy[count.index].arn
  role       = aws_iam_role.iam_role[0].name
}

variable "create_user" {
  description = "Whether to create an IAM user"
  type        = bool
  default     = false
}

variable "user_name" {
  description = "The name of the IAM user"
  type        = string
  default     = "example-user"
}

variable "create_role" {
  description = "Whether to create an IAM role"
  type        = bool
  default     = false
}

variable "role_name" {
  description = "The name of the IAM role"
  type        = string
  default     = "example-role"
}

variable "role_assume_policy" {
  description = "The IAM role assume policy document"
  type        = string
  default     = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF
}

variable "policy_names" {
  description = "List of policy names to create and attach"
  type        = list(string)
  default     = ["example-policy"]
}

variable "policy_jsons" {
  description = "List of policy JSON documents"
  type        = list(string)
  default     = [
    <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "s3:ListBucket",
      "Resource": "*"
    }
  ]
}
EOF
  ]
}


module "iam_example" {
  source       = "./modules/iam"
  create_user  = true
  user_name    = "example-user"
  policy_names = ["example-policy"]
  policy_jsons = [
    <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::example-bucket/*"
    }
  ]
}
EOF
  ]
}



