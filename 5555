locals {
  role_name = "my-existing-role"
}

data "aws_iam_role" "existing" {
  name = local.role_name
}

resource "aws_iam_policy" "my_policy" {
  name        = "my-policy"
  description = "A test policy"
  policy      = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListBucket"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::example-bucket"
      ]
    }
  ]
}
EOF
}

resource "aws_iam_role_policy_attachment" "attach_policy" {
  count      = data.aws_iam_role.existing ? 1 : 0
  role       = data.aws_iam_role.existing.name
  policy_arn = aws_iam_policy.my_policy.arn
}

# This can be used to detach all existing inline policies from the role
resource "null_resource" "detach_policies" {
  provisioner "local-exec" {
    command = <<EOT
      for policy in $(aws iam list-role-policies --role-name ${local.role_name} --query 'PolicyNames' --output text); do
        aws iam delete-role-policy --role-name ${local.role_name} --policy-name $policy
      done
EOT
    environment = {
      AWS_DEFAULT_REGION = "us-west-2"
    }
  }
  triggers = {
    role_name = local.role_name
  }
}

# Re-attach all the policies to the role after detaching old ones
resource "null_resource" "attach_new_policy" {
  depends_on = [null_resource.detach_policies]
  provisioner "local-exec" {
    command = "aws iam attach-role-policy --role-name ${local.role_name} --policy-arn ${aws_iam_policy.my_policy.arn}"
    environment = {
      AWS_DEFAULT_REGION = "us-west-2"
    }
  }
  triggers = {
    role_name = local.role_name
  }
}
