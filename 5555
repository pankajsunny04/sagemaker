provider "aws" {
  region = "us-east-1"
}

locals {
  role_name = "existing-role-name"
}

# Fetch existing IAM role if it exists
data "aws_iam_role" "existing" {
  name = local.role_name
  # Skip the failure and count as 0 if not found
  count = can(lookup(data.aws_iam_role.existing, "name", null)) ? 1 : 0
}

# Create IAM policy if role exists
resource "aws_iam_policy" "example" {
  count       = length(data.aws_iam_role.existing.*.name) > 0 ? 1 : 0
  name        = "example-policy"
  description = "An example policy"
  policy      = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListBucket"
      ],
      "Effect": "Allow",
      "Resource": [
        "*"
      ]
    }
  ]
}
EOF
}

# Detach all existing managed policies from role
resource "aws_iam_role_policy_attachment" "old_attachments" {
  for_each   = { for policy in data.aws_iam_role.existing[0].managed_policy_arns : policy => policy }
  role       = local.role_name
  policy_arn = each.value

  # Force terraform to remove existing attachments first
  lifecycle {
    create_before_destroy = false
  }
}

# Attach new policy
resource "aws_iam_role_policy_attachment" "example_attach" {
  count      = length(data.aws_iam_role.existing.*.name) > 0 ? 1 : 0
  role       = local.role_name
  policy_arn = aws_iam_policy.example[0].arn

  depends_on = [
    aws_iam_role_policy_attachment.old_attachments
  ]
}
