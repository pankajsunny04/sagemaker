data "aws_iam_role" "existing_role" {
  name = "existing_role_name" # replace with your existing IAM role name
}

# Fetch attached policies to the existing role
data "aws_iam_role_policies" "existing_policies" {
  role_name = data.aws_iam_role.existing_role.name
}

# Detach all existing policies
resource "aws_iam_role_policy_attachment" "detach_old_policies" {
  count      = length(data.aws_iam_role_policies.existing_policies.policy_names)
  role       = data.aws_iam_role.existing_role.name
  policy_arn = element(data.aws_iam_role_policies.existing_policies.policy_arns, count.index)
  lifecycle {
    create_before_destroy = false
    ignore_changes        = [policy_arn]
  }
}

# Conditionally create a new policy only if the IAM role exists
resource "aws_iam_policy" "new_policy" {
  count       = data.aws_iam_role.existing_role ? 1 : 0
  name        = "new_policy"
  description = "My new policy"
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "s3:ListBucket"
        ]
        Effect   = "Allow"
        Resource = ["*"]
      }
    ]
  })
}

# Attach new policy to existing role
resource "aws_iam_role_policy_attachment" "attach_new_policy" {
  count      = data.aws_iam_role.existing_role ? 1 : 0
  role       = data.aws_iam_role.existing_role.name
  policy_arn = aws_iam_policy.new_policy[0].arn
  depends_on = [aws_iam_role_policy_attachment.detach_old_policies]
}
