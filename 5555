provider "aws" {
  region = "us-west-2"
}

data "aws_iam_role" "existing" {
  name = "existing-role-name"
}

locals {
  role_exists = can(data.aws_iam_role.existing.arn) ? true : false
}

resource "aws_iam_policy" "new_policy" {
  count       = local.role_exists ? 1 : 0
  name        = "my-new-policy"
  description = "A test policy"
  policy      = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListBucket"
      ],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
}
EOF
}

resource "aws_iam_role_policy_attachment" "new_policy_attachment" {
  count      = local.role_exists ? 1 : 0
  role       = data.aws_iam_role.existing.name
  policy_arn = aws_iam_policy.new_policy[0].arn
}

resource "aws_iam_role_policy_attachment" "old_policy_detach" {
  for_each   = { for p in data.aws_iam_role.existing.attached_policies : p.policy_arn => p.policy_name }
  role       = data.aws_iam_role.existing.name
  policy_arn = each.key

  lifecycle {
    create_before_destroy = false
    ignore_changes        = [role, policy_arn]
  }
}

data "aws_iam_role" "existing" {
  depends_on = [aws_iam_role_policy_attachment.new_policy_attachment]
}
