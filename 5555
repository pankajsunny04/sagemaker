locals {
  role_name = "my-existing-role"
}

data "aws_iam_role" "existing" {
  name = local.role_name
}

resource "aws_iam_policy" "my_policy" {
  count       = data.aws_iam_role.existing ? 1 : 0
  name        = "my-policy"
  description = "A test policy"
  policy      = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListBucket"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::example-bucket"
      ]
    }
  ]
}
EOF
}

resource "aws_iam_role_policy_attachment" "my_policy_attach" {
  count      = data.aws_iam_role.existing && aws_iam_policy.my_policy[0] ? 1 : 0
  role       = data.aws_iam_role.existing.name
  policy_arn = aws_iam_policy.my_policy[0].arn
}

# Detach all old policies from the role
data "aws_iam_role_policies" "existing_policies" {
  role_name = local.role_name
}

resource "aws_iam_role_policy_attachment" "old_policies_detach" {
  for_each = toset(data.aws_iam_role_policies.existing_policies.policy_names)

  role       = local.role_name
  policy_arn = each.value
  lifecycle {
    create_before_destroy = false
    ignore_changes        = [role, policy_arn]
  }
}

