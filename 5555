provider "aws" {
  region = "us-west-2"
}

# Check if the role exists
data "aws_iam_role" "existing" {
  name = "existing-role-name"
}

# Create a new policy
resource "aws_iam_policy" "new_policy" {
  name        = "new-policy"
  description = "A test policy"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "s3:ListBucket"
        ]
        Effect = "Allow"
        Resource = "arn:aws:s3:::example-bucket"
      }
    ]
  })
}

# Attach the new policy to the existing role
resource "aws_iam_role_policy_attachment" "new_policy_attach" {
  role       = data.aws_iam_role.existing.name
  policy_arn = aws_iam_policy.new_policy.arn
}

# Provisioner to detach all old policies
# Note: Provisioners are not recommended, use carefully
resource "null_resource" "detach_old_policies" {
  provisioner "local-exec" {
    command = "aws iam list-attached-role-policies --role-name ${data.aws_iam_role.existing.name} --query 'AttachedPolicies[].PolicyArn' --output text | xargs -n 1 aws iam detach-role-policy --role-name ${data.aws_iam_role.existing.name} --policy-arn"
  }
  
  triggers = {
    always_run = timestamp()
  }

  depends_on = [aws_iam_role_policy_attachment.new_policy_attach]
}
