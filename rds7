provider "aws" {
  region = var.region
}

locals {
  is_aurora = var.engine == "aurora" || var.engine == "aurora-mysql" || var.engine == "aurora-postgresql"
}

resource "aws_rds_cluster" "aurora_cluster" {
  count = local.is_aurora ? 1 : 0

  cluster_identifier      = var.cluster_identifier
  engine                  = var.engine
  engine_version          = var.engine_version
  database_name           = var.database_name
  master_username         = var.master_username
  master_password         = var.master_password
  backup_retention_period = var.backup_retention_period
  preferred_backup_window = var.preferred_backup_window
  vpc_security_group_ids  = [aws_security_group.default.id]
  db_subnet_group_name    = aws_db_subnet_group.default.name
  skip_final_snapshot     = var.skip_final_snapshot
}

resource "aws_db_instance" "rds_instance" {
  count = local.is_aurora ? 0 : 1

  identifier             = var.db_instance_identifier
  engine                 = var.engine
  engine_version         = var.engine_version
  instance_class         = var.instance_class
  name                   = var.database_name
  username               = var.master_username
  password               = var.master_password
  allocated_storage      = var.allocated_storage
  backup_retention_period= var.backup_retention_period
  preferred_backup_window= var.preferred_backup_window
  vpc_security_group_ids = [aws_security_group.default.id]
  db_subnet_group_name   = aws_db_subnet_group.default.name
  skip_final_snapshot    = var.skip_final_snapshot

  depends_on = [aws_db_subnet_group.default, aws_security_group.default]
}

resource "aws_db_instance" "read_replica" {
  count = var.create_read_replica && !local.is_aurora ? 1 : 0

  identifier             = "${var.db_instance_identifier}-replica"
  replicate_source_db     = aws_db_instance.rds_instance[0].identifier
  instance_class         = var.instance_class
  vpc_security_group_ids = [aws_security_group.default.id]
  db_subnet_group_name   = aws_db_subnet_group.default.name
  depends_on             = [aws_db_instance.rds_instance]
}

resource "aws_db_subnet_group" "default" {
  name       = "${var.db_instance_identifier}-subnet-group"
  subnet_ids = var.subnet_ids
}

resource "aws_security_group" "default" {
  vpc_id = var.vpc_id

  ingress {
    from_port   = 3306
    to_port     = 3306
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
