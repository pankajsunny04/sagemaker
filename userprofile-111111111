resource "aws_sagemaker_domain" "example_domain" {
  # ... set domain parameters
}

resource "null_resource" "example_lifecycle_configuration" {
  provisioner "local-exec" {
    command = "aws sagemaker create-user-profile --domain-id ${aws_sagemaker_domain.example_domain.id} --user-profile-name example-user-profile --cli-input-json file://user_profile_config.json"
  }

  triggers = {
    # Trigger re-provisioning when the domain is re-created
    domain_id = aws_sagemaker_domain.example_domain.id
  }
}



import json
import boto3

def lambda_handler(event, context):
    client = boto3.client('sagemaker')

    # Assume the user profile and lifecycle configurations already exist
    user_profile_name = "my-user-profile-name"
    lifecycle_config_name = "my-lifecycle-config-name"

    try:
        response = client.update_user_profile(
            UserProfileName=user_profile_name,
            LifecycleConfigName=lifecycle_config_name
        )
        print(f"Successfully updated UserProfile: {response}")
    except Exception as e:
        print(f"Failed to update UserProfile: {e}")

    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }




provider "aws" {
  region = "us-west-2"
}

# Create Lambda function
resource "aws_lambda_function" "attach_lifecycle" {
  function_name = "attachLifecycleToStudioUserProfile"
  role          = aws_iam_role.lambda_exec.arn
  handler       = "lambda_function.lambda_handler"
  runtime       = "python3.8"
  # ... (zip file or S3 bucket information here for the lambda code)
}

# Create IAM role for Lambda function
resource "aws_iam_role" "lambda_exec" {
  name = "lambda_exec_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Principal = {
          Service = "lambda.amazonaws.com"
        },
        Effect = "Allow"
      }
    ]
  })
}

# Create CloudWatch Event Rule to Trigger Lambda
resource "aws_cloudwatch_event_rule" "every_five_minutes" {
  name                = "every-five-minutes"
  description         = "Fires every five minutes"
  schedule_expression = "rate(5 minutes)"
}

# Connect CloudWatch Event Rule to Lambda
resource "aws_cloudwatch_event_target" "run_attach_lifecycle" {
  rule      = aws_cloudwatch_event_rule.every_five_minutes.name
  target_id = "attachLifecycleToStudioUserProfile"
  arn       = aws_lambda_function.attach_lifecycle.arn
}

# Allow CloudWatch to trigger Lambda
resource "aws_lambda_permission" "allow_cloudwatch" {
  statement_id  = "AllowExecutionFromCloudWatch"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.attach_lifecycle.arn
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_rule.every_five_minutes.arn
}
